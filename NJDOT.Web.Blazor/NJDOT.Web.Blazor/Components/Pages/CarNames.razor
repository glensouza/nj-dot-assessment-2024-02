@page "/carnames"

@rendermode InteractiveServer

@inject NameGenerator nameGenerator
@inject CarDoesNotExist carDoesNotExist

@using NJDOT.Models
@using NJDOT.Services

<h3>Car Names</h3>

@if (votes.Count > 0)
{
    <h4>Vote (@votes.Count)</h4>
    <button class="btn btn-primary" @onclick="@VoteForFirstCar">Pick a car</button>
}

@if(cars.Count == 0)
{
    <p>Loading...</p>
}
else
{
    @foreach (Car car in cars.OrderByDescending(s => s.Score).ThenBy(s => s.CarName))
    {
        <p>Car Name is: @car.CarName (@($"{car.Score:N3}")) W-@car.Wins L-@car.Losses</p>
        <img src="@car.CarImage" alt="Random Car Image" />
    }
}

@code {
    private readonly List<Car> cars = new();
    private readonly List<Vote> votes = new();
    private double winner = 1200;
    private double loser = 1200;

    protected override async Task OnInitializedAsync()
    {
        for (int i = 0; i < 3; i++)
        {
            Car newCar = new()
            {
                CarImage = await carDoesNotExist.GetPicture(),
                CarName = nameGenerator.GetRandomCarName()
            };

            foreach (Car car in cars)
            {
                votes.Add(new Vote
                {
                    Car1 = newCar.CarName,
                    Car2 = car.CarName
                });
            }

            cars.Add(newCar);
        }

        await base.OnInitializedAsync();
    }

    private void VoteForFirstCar()
    {
        Vote? vote = votes.FirstOrDefault();

        if (vote == null)
        {
            return;
        }

        Car winnerCar = cars.First(c => c.CarName == vote.Car1);
        Car loserCar = cars.First(c => c.CarName == vote.Car2);

        (double, double) calculation = EloCalculator.CalculateElo(winnerCar.Score, loserCar.Score);
        winnerCar.Score += calculation.Item1;
        loserCar.Score += calculation.Item2;

        votes.Remove(vote);
    }
}
