@page "/carnames"

@rendermode InteractiveServer

@inject NameGenerator nameGenerator
@inject CarDoesNotExist carDoesNotExist

@using NJDOT.Models
@using NJDOT.Services

<PageTitle>Car Names</PageTitle>

@if(cars.Count == 0)
{
    <p>Loading...</p>
}
else
{
    @if (votes.Count > 0)
    {
        <h4>Vote (@votes.Count)</h4>
        <div class="form-group">
            <!-- display two images side by side -->
            <div class="row">
                <div class="col-md-6">
                    <img src="@GetCarImage(votes.FirstOrDefault()?.Car1)" alt="@votes.FirstOrDefault()?.Car1 Car Image"/>
                    <button class="btn btn-primary" @onclick="() => Vote(votes.FirstOrDefault()?.Car1, votes.FirstOrDefault()?.Car2)">Vote for @votes.FirstOrDefault()?.Car1</button>
                </div>
                <div class="col-md-6">
                    <img src="@GetCarImage(votes.FirstOrDefault()?.Car2)" alt="@votes.FirstOrDefault()?.Car2 Car Image"/>
                    <button class="btn btn-primary" @onclick="() => Vote(votes.FirstOrDefault()?.Car2, votes.FirstOrDefault()?.Car1)">Vote for @votes.FirstOrDefault()?.Car2</button>
                </div>
            </div>
        </div>
        <hr />
        <h4>Car Rankings</h4>
        <table>
            <thead>
            <tr>
                <th>Car Name</th>
                <th>Wins</th>
                <th>Losses</th>
                <th>Score</th>
            </tr>
            </thead>
            <tbody>
            @foreach (Car car in cars.OrderByDescending(s => s.Score).ThenBy(s => s.CarName))
            {
                <tr>
                    <td>@car.CarName</td>
                    <td>@car.Wins</td>
                    <td>@car.Losses</td>
                    <td>@car.Score.ToString("F3")</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <h3>Cars</h3>
        <div class="form-group">
            <div class="row">
                @foreach (Car car in cars.OrderByDescending(s => s.Score).ThenBy(s => s.CarName))
                {
                    <div class="col-md-4">
                        <h4>@car.CarName</h4>
                        <span><strong>Score</strong>: @car.Score.ToString("F3") <strong>Record</strong>: @car.Wins-@car.Losses</span>
                        <img src="@car.CarImage" class="car" alt="@car.CarName Car Image" />
                    </div>
                }
            </div>
        </div>
        <hr />
        <div class="form-group">
            <!-- display two images side by side -->
            <div class="row">
                <div class="col-md-6">
                    <button class="btn btn-primary" @onclick="async () => await GenerateNewCars()">Add 3 more cars</button>
                </div>
            </div>
        </div>
    }
}

@code {
    private readonly List<Car> cars = new();
    private readonly List<Vote> votes = new();

    protected override async Task OnInitializedAsync()
    {
        await GenerateNewCars();
        await base.OnInitializedAsync();
    }

    private void Vote(string? winner, string? loser)
    {
        if (winner == null || loser == null)
        {
            return;
        }

        Vote? vote = votes.FirstOrDefault(v => (v.Car1 == winner && v.Car2 == loser) || (v.Car2 == winner && v.Car1 == loser));

        if (vote == null)
        {
            return;
        }

        Car winnerCar = cars.First(c => c.CarName == winner);
        Car loserCar = cars.First(c => c.CarName == loser);

        (double, double) calculation = EloCalculator.CalculateElo(winnerCar.Score, loserCar.Score);
        winnerCar.Score += calculation.Item1;
        loserCar.Score += calculation.Item2;

        winnerCar.Wins++;
        loserCar.Losses++;

        votes.Remove(vote);
    }

    private string GetCarImage(string? carName)
    {
        return carName == null ? string.Empty : this.cars.First(c => c.CarName == carName).CarImage;
    }

    private async Task GenerateNewCars()
    {
        for (int i = 0; i < 3; i++)
        {
            string randomCarName;
            do
            {
                randomCarName = nameGenerator.GetRandomCarName();
            } while (cars.Any(c => c.CarName == randomCarName));

            Car newCar = new()
            {
                CarImage = await carDoesNotExist.GetPicture(),
                CarName = randomCarName
            };

            foreach (Car car in cars)
            {
                bool order = Random.Shared.Next() > int.MaxValue / 2;
                if (order)
                {
                    votes.Add(new Vote
                    {
                        Car1 = newCar.CarName,
                        Car2 = car.CarName
                    });
                }
                else
                {
                    votes.Add(new Vote
                    {
                        Car1 = car.CarName,
                        Car2 = newCar.CarName
                    });
                }
            }

            cars.Add(newCar);
        }
    }
}
